#!/usr/bin/env bash
# Exit immediately on error, undefined var, or pipeline failure
set -eo pipefail

# --- COLORS AND HELPERS ------------------------------------------------------
C_BLUE='\033[1;34m'
C_GREEN='\033[1;32m'
C_YELLOW='\033[1;33m'
C_RED='\033[1;31m'
C_RESET='\033[0m'

# Helpers for logging
log_step() {
  printf "\n%b%s%b\n" "${C_BLUE}" "### $1" "${C_RESET}"
}
log_info() {
  printf "%b[+] %s%b\n" "${C_YELLOW}" "$1" "${C_RESET}"
}
log_success() {
  printf "%b[✓] %s%b\n" "${C_GREEN}" "$1" "${C_RESET}"
}
log_error() {
  printf "%b[✗] %s%b\n" "${C_RED}" "$1" "${C_RESET}" >&2
  exit 1
}
indent() {
  sed 's/^/    /'
}

# --- SCRIPT START -------------------------------------------------------------
log_step "0. Prompt for user info"
read -rp "Enter your domain (e.g. vpn.example.com), or leave empty to use VPS IP: " DOMAIN < /dev/tty
read -rp "Enter a label for the main user (e.g., 'my-phone'): " MAIN_USER_LABEL < /dev/tty
if [[ -z "$MAIN_USER_LABEL" ]]; then
    log_error "The main user label cannot be empty."
fi


log_step "1. Install basic packages"
log_info "Updating package lists..."
apt update | indent
log_info "Installing required packages..."
apt install -y curl jq qrencode unzip openssl | indent
log_success "Basic packages installed."

log_step "2. Enable BBR congestion control"
log_info "Checking BBR status..."
if sysctl -n net.ipv4.tcp_congestion_control | grep -q bbr; then
  log_success "BBR is already enabled."
else
  log_info "Enabling BBR..."
  {
    echo "net.core.default_qdisc=fq"
    echo "net.ipv4.tcp_congestion_control=bbr"
  } >> /etc/sysctl.conf
  sysctl -p | indent
  log_success "BBR has been enabled."
fi

log_step "3. Install Xray-core via official installer"
log_info "Running the official Xray installer..."
bash -c "$(curl -L https://github.com/XTLS/Xray-install/raw/main/install-release.sh)" @ install | indent
log_success "Xray-core installed."

log_step "4. Generate UUID, X25519 keys and shortId"
log_info "Generating keys and identifiers..."
CONFIG_DIR=/usr/local/etc/xray
mkdir -p "$CONFIG_DIR"
KEYFILE="$CONFIG_DIR/.keys"

UUID=$(xray uuid)
X25519_OUT=$(xray x25519)
SHORT_ID=$(openssl rand -hex 8)

printf "uuid: %s\n%s\nshortsid: %s\n" \
  "$UUID" "$X25519_OUT" "$SHORT_ID" > "$KEYFILE"

PRIV_KEY=$(awk -F': ' '/Private key/ {print $2}' "$KEYFILE")
PUB_KEY=$(awk  -F': ' '/Public key/  {print $2}'  "$KEYFILE")
log_success "Keys and identifiers generated."

log_step "5. Write Xray config.json"
log_info "Creating Xray configuration file..."
cat > "$CONFIG_DIR/config.json" <<EOF
{
  "log": { "loglevel": "warning" },
  "routing": {
    "domainStrategy": "IPIfNonMatch",
    "rules": [
      { "type": "field", "domain": ["geosite:category-ads-all"], "outboundTag": "block" },
      { "type": "field", "ip": ["geoip:cn"], "outboundTag": "block" }
    ]
  },
  "inbounds": [
    {
      "listen": "0.0.0.0",
      "port": 443,
      "protocol": "vless",
      "settings": {
        "clients": [
          { "id": "$UUID", "label": "$MAIN_USER_LABEL", "flow": "xtls-rprx-vision" }
        ],
        "decryption": "none"
      },
      "streamSettings": {
        "network": "tcp",
        "security": "reality",
        "realitySettings": {
          "show": false,
          "dest": "github.com:443",
          "xver": 0,
          "serverNames": ["github.com","www.github.com"],
          "privateKey": "$PRIV_KEY",
          "shortIds": ["$SHORT_ID"]
        }
      },
      "sniffing": { "enabled": true, "destOverride": ["http","tls"] }
    }
  ],
  "outbounds": [
    { "protocol": "freedom",  "tag": "direct" },
    { "protocol": "blackhole","tag": "block"  }
  ],
  "policy": { "levels": { "0": { "handshake": 3, "connIdle": 180 } } }
}
EOF
log_success "Xray configuration written to $CONFIG_DIR/config.json"

log_step "6. Create systemd service"
log_info "Setting up systemd service..."
SERVICE_FILE=/etc/systemd/system/xray.service
cat > "$SERVICE_FILE" <<EOF
[Unit]
Description=Xray Service
After=network.target nss-lookup.target

[Service]
ExecStart=/usr/local/bin/xray run -config $CONFIG_DIR/config.json
Restart=on-failure
LimitNOFILE=1000000

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable xray
systemctl restart xray
log_success "Xray service created and started."

log_step "7. Determine endpoint and create manager script"
if [[ -n "$DOMAIN" ]]; then
  ENDPOINT="$DOMAIN"
else
  log_info "No domain provided, fetching VPS IP..."
  ENDPOINT=$(curl -4 -s ifconfig.me)
fi
echo "$ENDPOINT" > "$CONFIG_DIR/.endpoint"
log_info "Endpoint is: $ENDPOINT"

log_info "Creating user management script at /usr/local/bin/xray-manager..."
# Note the escaped backslashes for colors in the heredoc
cat > /usr/local/bin/xray-manager <<'EOF'
#!/usr/bin/env bash
set -euo pipefail

# --- CONFIGURATION AND COLORS ---
CONFIG_DIR="/usr/local/etc/xray"
KEYFILE="$CONFIG_DIR/.keys"
CONFIG_FILE="$CONFIG_DIR/config.json"
ENDPOINT_FILE="$CONFIG_DIR/.endpoint"

C_BLUE='\033[1;34m'
C_GREEN='\033[1;32m'
C_YELLOW='\033[1;33m'
C_RED='\033[1;31m'
C_RESET='\033[0m'

# --- HELPERS ---
log_error() {
  printf "%b[✗] %s%b\n" "${C_RED}" "$1" "${C_RESET}" >&2
  exit 1
}

# --- VALIDATION ---
if [[ ! -f "$ENDPOINT_FILE" ]]; then
    log_error "Configuration is incomplete. Endpoint file not found."
fi
ENDPOINT=$(cat "$ENDPOINT_FILE")

# --- FUNCTIONS ---

get_main_link() {
    local main_user_label
    main_user_label=$(jq -r '.inbounds[0].settings.clients[0].label' "$CONFIG_FILE")
    if [[ -z "$main_user_label" ]]; then
        log_error "Could not find the main user."
    }
    share_link "$main_user_label"
}

list_users() {
    mapfile -t labels < <(jq -r '.inbounds[0].settings.clients[].label' "$CONFIG_FILE")
    if [[ ${#labels[@]} -eq 0 ]]; then
        echo "No users found."
        exit 0
    }
    printf "${C_BLUE}ID | Label${C_RESET}\n"
    printf -- "---|------\n"
    for i in "${!labels[@]}"; do
      printf "%2d) %s\n" $((i+1)) "${labels[$i]}"
    done
}

add_user() {
    read -rp "Enter new user label: " label < /dev/tty
    if [[ -z "$label" ]]; then
        log_error "Empty label provided. Aborting."
    }
    if jq -e --arg l "$label" '.inbounds[0].settings.clients[] | select(.label == $l)' "$CONFIG_FILE" >/dev/null; then
      log_error "User label '$label' already exists."
    }
    local uuid
    uuid=$(xray uuid)
    local tmp_file
    tmp_file=$(mktemp)
    jq --arg l "$label" --arg u "$uuid" \
       '.inbounds[0].settings.clients += [{"label":$l,"id":$u,"flow":"xtls-rprx-vision"}]' \
       "$CONFIG_FILE" > "$tmp_file" && mv "$tmp_file" "$CONFIG_FILE"
    if systemctl restart xray; then
        printf "\n%bUser '%s' created successfully.%b\n" "${C_GREEN}" "$label" "${C_RESET}"
        share_link "$label"
    else
        log_error "Failed to restart Xray service."
    }
}

remove_user() {
    mapfile -t labels < <(jq -r '.inbounds[0].settings.clients[].label' "$CONFIG_FILE")
    if [[ ${#labels[@]} -eq 0 ]]; then
        echo "No users to delete."
        exit 0
    }

    echo "Select user to delete:"
    for i in "${!labels[@]}"; do printf "%2d) %s\n" $((i+1)) "${labels[$i]}"; done
    read -rp "Enter the number of the user: " idx < /dev/tty

    if ! [[ "$idx" =~ ^[0-9]+$ ]] || (( idx < 1 || idx > ${#labels[@]} )); then
        log_error "Invalid selection."
    }

    local label_to_remove="${labels[$((idx-1))]}"
    local tmp_file
    tmp_file=$(mktemp)
    jq --arg l "$label_to_remove" '(.inbounds[0].settings.clients) |= map(select(.label != $l))' \
       "$CONFIG_FILE" > "$tmp_file" && mv "$tmp_file" "$CONFIG_FILE"
    if systemctl restart xray; then
        printf "%bUser '%s' deleted successfully.%b\n" "${C_GREEN}" "$label_to_remove" "${C_RESET}"
    else
        log_error "Failed to restart Xray service."
    }
}

share_link() {
    mapfile -t labels < <(jq -r '.inbounds[0].settings.clients[].label' "$CONFIG_FILE")
    local label
    if [[ -n "${1-}" ]]; then
        label="$1"
        if ! jq -e --arg l "$label" '.inbounds[0].settings.clients[] | select(.label == $l)' "$CONFIG_FILE" >/dev/null; then
            log_error "User '$label' not found."
        }
    else
        echo "Select user to share link:"
        for i in "${!labels[@]}"; do printf "%2d) %s\n" $((i+1)) "${labels[$i]}"; done
        read -rp "Enter the number of the user: " idx < /dev/tty
        if ! [[ "$idx" =~ ^[0-9]+$ ]] || (( idx < 1 || idx > ${#labels[@]} )); then
            log_error "Invalid selection."
        }
        label="${labels[$((idx-1))]}"
    }

    local uuid
    uuid=$(jq -r --arg l "$label" '.inbounds[0].settings.clients[] | select(.label==$l).id' "$CONFIG_FILE")
    local proto
    proto=$(jq -r '.inbounds[0].protocol' "$CONFIG_FILE")
    local port
    port=$(jq -r '.inbounds[0].port' "$CONFIG_FILE")
    local pbk
    pbk=$(awk -F': ' '/Public key/ {print $2}' "$KEYFILE")
    local sid
    sid=$(awk -F': ' '/shortsid/ {print $2}' "$KEYFILE")
    local sni
    sni=$(jq -r '.inbounds[0].streamSettings.realitySettings.serverNames[0]' "$CONFIG_FILE")

    local link="$proto://$uuid@$ENDPOINT:$port?security=reality&sni=$sni&fp=firefox&pbk=$pbk&sid=$sid&spx=/&type=tcp&flow=xtls-rprx-vision&encryption=none#$label"
    printf "\n${C_YELLOW}Connection link for %s:${C_RESET}\n%s\n\n" "$label" "$link"
    printf "${C_YELLOW}QR code:${C_RESET}\n"
    echo "$link" | qrencode -t ansiutf8
}

# --- ARGUMENT PARSING ---
COMMAND="${1-}"
if [[ -n "${1-}" ]]; then
    shift
fi

case "$COMMAND" in
    mainlink) get_main_link ;;
    list) list_users ;;
    add) add_user ;;
    remove) remove_user ;;
    link) share_link "${1-}" ;;
    *)
        printf "%bXray-Manager:%b A simple tool to manage Xray users.\n\n" "${C_BLUE}" "${C_RESET}"
        printf "  %bUsage:%b xray-manager <command> [arguments]\n\n" "${C_YELLOW}" "${C_RESET}"
        printf "  %bCommands:%b\n" "${C_YELLOW}" "${C_RESET}"
        printf "    mainlink      Show the main user\'s connection link and QR code.\n"
        printf "    list          List all users.\n"
        printf "    add           Add a new user.\n"
        printf "    remove        Remove an existing user.\n"
        printf "    link [label]  Show connection link and QR code for a specific user.\n"
        exit 1
        ;;
esac
EOF
chmod +x /usr/local/bin/xray-manager
log_success "User management script created."


log_step "8. Create help cheat-sheet"
cat > "$HOME/xray-help" <<'EOF'
Xray user-management commands:

    xray-manager mainlink   – show main user link & QR
    xray-manager list       – list every user
    xray-manager add        – create a new user
    xray-manager remove     – delete a user
    xray-manager link [lbl] – choose user and print link / QR

Config file:

    /usr/local/etc/xray/config.json

Restart Xray:

    systemctl restart xray
EOF
chmod 644 "$HOME/xray-help"
log_success "Help file created at ~/xray-help"

log_step "9. Final banner"
log_success "Installation complete. Use 'xray-manager' to manage users."
echo "Example commands:"
echo "  xray-manager list"
echo "  xray-manager add"
echo "  xray-manager mainlink"
echo -e "\nShowing main user link now:\n"

/usr/local/bin/xray-manager mainlink