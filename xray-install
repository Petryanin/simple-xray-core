#!/usr/bin/env bash
# Exit immediately on error, undefined var, or pipeline failure
set -eo pipefail

# --- COLORS AND HELPERS ------------------------------------------------------
C_BLUE='\033[1;34m'
C_GREEN='\033[1;32m'
C_YELLOW='\033[1;33m'
C_RED='\033[1;31m'
C_RESET='\033[0m'

# Helpers for logging
log_step() {
  printf "\n%b%s%b\n" "${C_BLUE}" "### $1" "${C_RESET}"
}
log_info() {
  printf "%b[+] %s%b\n" "${C_YELLOW}" "$1" "${C_RESET}"
}
log_success() {
  printf "%b[✓] %s%b\n" "${C_GREEN}" "$1" "${C_RESET}"
}
log_error() {
  printf "%b[✗] %s%b\n" "${C_RED}" "$1" "${C_RESET}" >&2
  exit 1
}
indent() {
  sed 's/^/    /'
}

# --- SCRIPT START -------------------------------------------------------------
log_step "1. User info"
read -rp "Enter your domain (e.g. vpn.example.com), or leave empty to use VPS IP: " DOMAIN < /dev/tty
read -rp "Enter a label for the main user (e.g., 'my-phone'): " MAIN_USER_LABEL < /dev/tty
if [[ -z "$MAIN_USER_LABEL" ]]; then
    log_error "The main user label cannot be empty."
fi


log_step "2. Install basic packages"
log_info "Updating package lists..."
apt update | indent
log_info "Installing required packages..."
apt install -y curl jq qrencode unzip openssl | indent
log_success "Basic packages installed."

log_step "3. Enable BBR congestion control"
log_info "Checking BBR status..."
if sysctl -n net.ipv4.tcp_congestion_control | grep -q bbr; then
  log_success "BBR is already enabled."
else
  log_info "Enabling BBR..."
  {
    echo "net.core.default_qdisc=fq"
    echo "net.ipv4.tcp_congestion_control=bbr"
  } >> /etc/sysctl.conf
  sysctl -p | indent
  log_success "BBR has been enabled."
fi

log_step "4. Install Xray-core via official installer"
log_info "Running the official Xray installer..."
bash -c "$(curl -L https://github.com/XTLS/Xray-install/raw/main/install-release.sh)" @ install | indent
log_success "Xray-core installed."

log_step "5. Generate UUID, X25519 keys and shortId"
log_info "Generating keys and identifiers..."
CONFIG_DIR=/usr/local/etc/xray
mkdir -p "$CONFIG_DIR"
KEYFILE="$CONFIG_DIR/.keys"

UUID=$(xray uuid)
X25519_OUT=$(xray x25519)
SHORT_ID=$(openssl rand -hex 8)

printf "uuid: %s\n%s\nshortsid: %s\n" \
  "$UUID" "$X25519_OUT" "$SHORT_ID" > "$KEYFILE"

PRIV_KEY=$(awk -F': ' '/Private key/ {print $2}' "$KEYFILE")
PUB_KEY=$(awk  -F': ' '/Public key/  {print $2}'  "$KEYFILE")
log_success "Keys and identifiers generated."

log_step "6. Write Xray config.json"
log_info "Creating Xray configuration file..."
cat > "$CONFIG_DIR/config.json" <<EOF
{
  "log": { "loglevel": "warning" },
  "routing": {
    "domainStrategy": "IPIfNonMatch",
    "rules": [
      { "type": "field", "domain": ["geosite:category-ads-all"], "outboundTag": "block" },
      { "type": "field", "ip": ["geoip:cn"], "outboundTag": "block" }
    ]
  },
  "inbounds": [
    {
      "listen": "0.0.0.0",
      "port": 443,
      "protocol": "vless",
      "settings": {
        "clients": [
          { "id": "$UUID", "label": "$MAIN_USER_LABEL", "flow": "xtls-rprx-vision" }
        ],
        "decryption": "none"
      },
      "streamSettings": {
        "network": "tcp",
        "security": "reality",
        "realitySettings": {
          "show": false,
          "dest": "github.com:443",
          "xver": 0,
          "serverNames": ["github.com","www.github.com"],
          "privateKey": "$PRIV_KEY",
          "shortIds": ["$SHORT_ID"]
        }
      },
      "sniffing": { "enabled": true, "destOverride": ["http","tls"] }
    }
  ],
  "outbounds": [
    { "protocol": "freedom",  "tag": "direct" },
    { "protocol": "blackhole","tag": "block"  }
  ],
  "policy": { "levels": { "0": { "handshake": 3, "connIdle": 180 } } }
}
EOF
log_success "Xray configuration written to $CONFIG_DIR/config.json"

log_step "7. Create systemd service"
log_info "Setting up systemd service..."
SERVICE_FILE=/etc/systemd/system/xray.service
cat > "$SERVICE_FILE" <<EOF
[Unit]
Description=Xray Service
After=network.target nss-lookup.target

[Service]
ExecStart=/usr/local/bin/xray run -config $CONFIG_DIR/config.json
Restart=on-failure
LimitNOFILE=1000000

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable xray
systemctl restart xray
log_success "Xray service created and started."

log_step "8. Determine endpoint and create manager script"
if [[ -n "$DOMAIN" ]]; then
  ENDPOINT="$DOMAIN"
else
  log_info "No domain provided, fetching VPS IP..."
  ENDPOINT=$(curl -4 -s ifconfig.me)
fi
echo "$ENDPOINT" > "$CONFIG_DIR/.endpoint"
log_info "Endpoint is: $ENDPOINT"

log_info "Installing user management script to /usr/local/bin/xray-manager..."
cp xray-manager /usr/local/bin/xray-manager
chmod +x /usr/local/bin/xray-manager
log_success "User management script installed."

log_step "9. Finalizing"
log_success "Installation complete!"

printf "\n%b--- Cheat Sheet ---%b\n"
printf "${C_YELLOW}To manage users, use the command:%b xray-manager\n"
printf "${C_YELLOW}Available commands:%b\n"
printf "  xray-manager mainlink   – Show main user link & QR\n"
printf "  xray-manager list       – List all users\n"
printf "  xray-manager add        – Create a new user\n"
printf "  xray-manager remove     – Delete a user\n"
printf "  xray-manager restart    – Restart the Xray service\n"
printf "  xray-manager link [lbl] – Show link/QR for a specific user\n\n"
printf "${C_YELLOW}Config file location:%b /usr/local/etc/xray/config.json\n"
printf "${C_YELLOW}To restart Xray manually:%b systemctl restart xray\n${C_RESET}"
printf "%b-------------------%b\n"


echo -e "\nShowing main user link now:"

/usr/local/bin/xray-manager mainlink